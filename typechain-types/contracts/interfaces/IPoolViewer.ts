/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IGammaPool {
  export type PoolDataStruct = {
    poolId: PromiseOrValue<string>;
    protocolId: PromiseOrValue<BigNumberish>;
    borrowStrategy: PromiseOrValue<string>;
    repayStrategy: PromiseOrValue<string>;
    rebalanceStrategy: PromiseOrValue<string>;
    shortStrategy: PromiseOrValue<string>;
    singleLiquidationStrategy: PromiseOrValue<string>;
    batchLiquidationStrategy: PromiseOrValue<string>;
    factory: PromiseOrValue<string>;
    paramsStore: PromiseOrValue<string>;
    LP_TOKEN_BALANCE: PromiseOrValue<BigNumberish>;
    LP_TOKEN_BORROWED: PromiseOrValue<BigNumberish>;
    LP_TOKEN_BORROWED_PLUS_INTEREST: PromiseOrValue<BigNumberish>;
    BORROWED_INVARIANT: PromiseOrValue<BigNumberish>;
    LP_INVARIANT: PromiseOrValue<BigNumberish>;
    cfmm: PromiseOrValue<string>;
    accFeeIndex: PromiseOrValue<BigNumberish>;
    extSwapFee: PromiseOrValue<BigNumberish>;
    origFee: PromiseOrValue<BigNumberish>;
    LAST_BLOCK_NUMBER: PromiseOrValue<BigNumberish>;
    lastCFMMFeeIndex: PromiseOrValue<BigNumberish>;
    lastCFMMInvariant: PromiseOrValue<BigNumberish>;
    lastCFMMTotalSupply: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    tokens: PromiseOrValue<string>[];
    symbols: PromiseOrValue<string>[];
    names: PromiseOrValue<string>[];
    decimals: PromiseOrValue<BigNumberish>[];
    TOKEN_BALANCE: PromiseOrValue<BigNumberish>[];
    CFMM_RESERVES: PromiseOrValue<BigNumberish>[];
    lastPrice: PromiseOrValue<BigNumberish>;
    lastFeeIndex: PromiseOrValue<BigNumberish>;
    borrowRate: PromiseOrValue<BigNumberish>;
    utilizationRate: PromiseOrValue<BigNumberish>;
    currBlockNumber: PromiseOrValue<BigNumberish>;
    ltvThreshold: PromiseOrValue<BigNumberish>;
    liquidationFee: PromiseOrValue<BigNumberish>;
    supplyRate: PromiseOrValue<BigNumberish>;
    emaUtilRate: PromiseOrValue<BigNumberish>;
    emaMultiplier: PromiseOrValue<BigNumberish>;
    minUtilRate1: PromiseOrValue<BigNumberish>;
    minUtilRate2: PromiseOrValue<BigNumberish>;
    feeDivisor: PromiseOrValue<BigNumberish>;
  };

  export type PoolDataStructOutput = [
    string,
    number,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    string[],
    string[],
    number[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    number,
    number,
    number,
    number,
    number
  ] & {
    poolId: string;
    protocolId: number;
    borrowStrategy: string;
    repayStrategy: string;
    rebalanceStrategy: string;
    shortStrategy: string;
    singleLiquidationStrategy: string;
    batchLiquidationStrategy: string;
    factory: string;
    paramsStore: string;
    LP_TOKEN_BALANCE: BigNumber;
    LP_TOKEN_BORROWED: BigNumber;
    LP_TOKEN_BORROWED_PLUS_INTEREST: BigNumber;
    BORROWED_INVARIANT: BigNumber;
    LP_INVARIANT: BigNumber;
    cfmm: string;
    accFeeIndex: BigNumber;
    extSwapFee: number;
    origFee: number;
    LAST_BLOCK_NUMBER: number;
    lastCFMMFeeIndex: BigNumber;
    lastCFMMInvariant: BigNumber;
    lastCFMMTotalSupply: BigNumber;
    totalSupply: BigNumber;
    tokens: string[];
    symbols: string[];
    names: string[];
    decimals: number[];
    TOKEN_BALANCE: BigNumber[];
    CFMM_RESERVES: BigNumber[];
    lastPrice: BigNumber;
    lastFeeIndex: BigNumber;
    borrowRate: BigNumber;
    utilizationRate: BigNumber;
    currBlockNumber: number;
    ltvThreshold: number;
    liquidationFee: number;
    supplyRate: BigNumber;
    emaUtilRate: number;
    emaMultiplier: number;
    minUtilRate1: number;
    minUtilRate2: number;
    feeDivisor: number;
  };

  export type RateDataStruct = {
    accFeeIndex: PromiseOrValue<BigNumberish>;
    lastCFMMFeeIndex: PromiseOrValue<BigNumberish>;
    lastFeeIndex: PromiseOrValue<BigNumberish>;
    borrowRate: PromiseOrValue<BigNumberish>;
    utilizationRate: PromiseOrValue<BigNumberish>;
    lastBlockNumber: PromiseOrValue<BigNumberish>;
    currBlockNumber: PromiseOrValue<BigNumberish>;
    lastPrice: PromiseOrValue<BigNumberish>;
    supplyRate: PromiseOrValue<BigNumberish>;
    BORROWED_INVARIANT: PromiseOrValue<BigNumberish>;
    LP_INVARIANT: PromiseOrValue<BigNumberish>;
    emaUtilRate: PromiseOrValue<BigNumberish>;
    minUtilRate1: PromiseOrValue<BigNumberish>;
    minUtilRate2: PromiseOrValue<BigNumberish>;
    feeDivisor: PromiseOrValue<BigNumberish>;
    origFee: PromiseOrValue<BigNumberish>;
    ltvThreshold: PromiseOrValue<BigNumberish>;
    liquidationFee: PromiseOrValue<BigNumberish>;
    shortStrategy: PromiseOrValue<string>;
    paramsStore: PromiseOrValue<string>;
  };

  export type RateDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    accFeeIndex: BigNumber;
    lastCFMMFeeIndex: BigNumber;
    lastFeeIndex: BigNumber;
    borrowRate: BigNumber;
    utilizationRate: BigNumber;
    lastBlockNumber: BigNumber;
    currBlockNumber: BigNumber;
    lastPrice: BigNumber;
    supplyRate: BigNumber;
    BORROWED_INVARIANT: BigNumber;
    LP_INVARIANT: BigNumber;
    emaUtilRate: BigNumber;
    minUtilRate1: BigNumber;
    minUtilRate2: BigNumber;
    feeDivisor: BigNumber;
    origFee: BigNumber;
    ltvThreshold: BigNumber;
    liquidationFee: BigNumber;
    shortStrategy: string;
    paramsStore: string;
  };

  export type LoanDataStruct = {
    id: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    poolId: PromiseOrValue<string>;
    rateIndex: PromiseOrValue<BigNumberish>;
    initLiquidity: PromiseOrValue<BigNumberish>;
    lastLiquidity: PromiseOrValue<BigNumberish>;
    liquidity: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
    lpTokens: PromiseOrValue<BigNumberish>;
    tokensHeld: PromiseOrValue<BigNumberish>[];
    refAddr: PromiseOrValue<string>;
    refFee: PromiseOrValue<BigNumberish>;
    refType: PromiseOrValue<BigNumberish>;
    px: PromiseOrValue<BigNumberish>;
    canLiquidate: PromiseOrValue<boolean>;
    accFeeIndex: PromiseOrValue<BigNumberish>;
    lastCFMMFeeIndex: PromiseOrValue<BigNumberish>;
    LAST_BLOCK_NUMBER: PromiseOrValue<BigNumberish>;
    tokens: PromiseOrValue<string>[];
    decimals: PromiseOrValue<BigNumberish>[];
    symbols: PromiseOrValue<string>[];
    names: PromiseOrValue<string>[];
    paramsStore: PromiseOrValue<string>;
    shortStrategy: PromiseOrValue<string>;
    BORROWED_INVARIANT: PromiseOrValue<BigNumberish>;
    LP_TOKEN_BALANCE: PromiseOrValue<BigNumberish>;
    lastCFMMInvariant: PromiseOrValue<BigNumberish>;
    lastCFMMTotalSupply: PromiseOrValue<BigNumberish>;
    ltvThreshold: PromiseOrValue<BigNumberish>;
    liquidationFee: PromiseOrValue<BigNumberish>;
  };

  export type LoanDataStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    string,
    number,
    number,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    string[],
    number[],
    string[],
    string[],
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    tokenId: BigNumber;
    poolId: string;
    rateIndex: BigNumber;
    initLiquidity: BigNumber;
    lastLiquidity: BigNumber;
    liquidity: BigNumber;
    collateral: BigNumber;
    lpTokens: BigNumber;
    tokensHeld: BigNumber[];
    refAddr: string;
    refFee: number;
    refType: number;
    px: BigNumber;
    canLiquidate: boolean;
    accFeeIndex: BigNumber;
    lastCFMMFeeIndex: BigNumber;
    LAST_BLOCK_NUMBER: BigNumber;
    tokens: string[];
    decimals: number[];
    symbols: string[];
    names: string[];
    paramsStore: string;
    shortStrategy: string;
    BORROWED_INVARIANT: BigNumber;
    LP_TOKEN_BALANCE: BigNumber;
    lastCFMMInvariant: BigNumber;
    lastCFMMTotalSupply: BigNumber;
    ltvThreshold: BigNumber;
    liquidationFee: BigNumber;
  };
}

export interface IPoolViewerInterface extends utils.Interface {
  functions: {
    "calcDynamicOriginationFee(address,uint256)": FunctionFragment;
    "canLiquidate(address,uint256)": FunctionFragment;
    "getLatestPoolData(address)": FunctionFragment;
    "getLatestRates(address)": FunctionFragment;
    "getLoans(address,uint256,uint256,bool)": FunctionFragment;
    "getLoansById(address,uint256[],bool)": FunctionFragment;
    "getPoolData(address)": FunctionFragment;
    "getTokensMetaData(address[])": FunctionFragment;
    "loan(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calcDynamicOriginationFee"
      | "canLiquidate"
      | "getLatestPoolData"
      | "getLatestRates"
      | "getLoans"
      | "getLoansById"
      | "getPoolData"
      | "getTokensMetaData"
      | "loan"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calcDynamicOriginationFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canLiquidate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPoolData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestRates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoans",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoansById",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensMetaData",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "loan",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcDynamicOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoansById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensMetaData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loan", data: BytesLike): Result;

  events: {};
}

export interface IPoolViewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolViewerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calcDynamicOriginationFee(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { origFee: BigNumber }>;

    canLiquidate(
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getLatestPoolData(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IGammaPool.PoolDataStructOutput] & {
        data: IGammaPool.PoolDataStructOutput;
      }
    >;

    getLatestRates(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IGammaPool.RateDataStructOutput] & {
        data: IGammaPool.RateDataStructOutput;
      }
    >;

    getLoans(
      pool: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [IGammaPool.LoanDataStructOutput[]] & {
        _loans: IGammaPool.LoanDataStructOutput[];
      }
    >;

    getLoansById(
      pool: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [IGammaPool.LoanDataStructOutput[]] & {
        _loans: IGammaPool.LoanDataStructOutput[];
      }
    >;

    getPoolData(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IGammaPool.PoolDataStructOutput] & {
        data: IGammaPool.PoolDataStructOutput;
      }
    >;

    getTokensMetaData(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], number[]] & {
        _symbols: string[];
        _names: string[];
        _decimals: number[];
      }
    >;

    loan(
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IGammaPool.LoanDataStructOutput] & {
        loanData: IGammaPool.LoanDataStructOutput;
      }
    >;
  };

  calcDynamicOriginationFee(
    pool: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canLiquidate(
    pool: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getLatestPoolData(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IGammaPool.PoolDataStructOutput>;

  getLatestRates(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IGammaPool.RateDataStructOutput>;

  getLoans(
    pool: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    active: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<IGammaPool.LoanDataStructOutput[]>;

  getLoansById(
    pool: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    active: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<IGammaPool.LoanDataStructOutput[]>;

  getPoolData(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IGammaPool.PoolDataStructOutput>;

  getTokensMetaData(
    _tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], number[]] & {
      _symbols: string[];
      _names: string[];
      _decimals: number[];
    }
  >;

  loan(
    pool: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGammaPool.LoanDataStructOutput>;

  callStatic: {
    calcDynamicOriginationFee(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canLiquidate(
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLatestPoolData(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IGammaPool.PoolDataStructOutput>;

    getLatestRates(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IGammaPool.RateDataStructOutput>;

    getLoans(
      pool: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<IGammaPool.LoanDataStructOutput[]>;

    getLoansById(
      pool: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<IGammaPool.LoanDataStructOutput[]>;

    getPoolData(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IGammaPool.PoolDataStructOutput>;

    getTokensMetaData(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], number[]] & {
        _symbols: string[];
        _names: string[];
        _decimals: number[];
      }
    >;

    loan(
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGammaPool.LoanDataStructOutput>;
  };

  filters: {};

  estimateGas: {
    calcDynamicOriginationFee(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canLiquidate(
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPoolData(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestRates(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoans(
      pool: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoansById(
      pool: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolData(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensMetaData(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loan(
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcDynamicOriginationFee(
      pool: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canLiquidate(
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPoolData(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestRates(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoans(
      pool: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoansById(
      pool: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      active: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolData(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensMetaData(
      _tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    loan(
      pool: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
