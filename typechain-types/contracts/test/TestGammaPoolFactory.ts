/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TestGammaPoolFactoryInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addProtocol(address)": FunctionFragment;
    "allPoolsLength()": FunctionFragment;
    "cfmm()": FunctionFragment;
    "createPool(uint16,address,address[],bytes)": FunctionFragment;
    "createPool2(bytes)": FunctionFragment;
    "decimals(uint256)": FunctionFragment;
    "deployer()": FunctionFragment;
    "fee()": FunctionFragment;
    "feeInfo()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "feeToSetter()": FunctionFragment;
    "getKey(address)": FunctionFragment;
    "getPool(bytes32)": FunctionFragment;
    "getPoolFee(address)": FunctionFragment;
    "getPools(uint256,uint256)": FunctionFragment;
    "getProtocol(uint16)": FunctionFragment;
    "isProtocolRestricted(uint16)": FunctionFragment;
    "origFeeShare()": FunctionFragment;
    "owner()": FunctionFragment;
    "pausePoolFunction(address,uint8)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "protocol()": FunctionFragment;
    "protocolId()": FunctionFragment;
    "removeProtocol(uint16)": FunctionFragment;
    "setFee(uint16)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setFeeToSetter(address)": FunctionFragment;
    "setIsProtocolRestricted(uint16,bool)": FunctionFragment;
    "setOrigFeeShare(uint16)": FunctionFragment;
    "setPoolFee(address,address,uint16,uint16,bool)": FunctionFragment;
    "setPoolParams(address,uint16,uint8,uint8,uint8,uint8,uint16,uint8,uint8)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpausePoolFunction(address,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "addProtocol"
      | "allPoolsLength"
      | "cfmm"
      | "createPool"
      | "createPool2"
      | "decimals"
      | "deployer"
      | "fee"
      | "feeInfo"
      | "feeTo"
      | "feeToSetter"
      | "getKey"
      | "getPool"
      | "getPoolFee"
      | "getPools"
      | "getProtocol"
      | "isProtocolRestricted"
      | "origFeeShare"
      | "owner"
      | "pausePoolFunction"
      | "pendingOwner"
      | "protocol"
      | "protocolId"
      | "removeProtocol"
      | "setFee"
      | "setFeeTo"
      | "setFeeToSetter"
      | "setIsProtocolRestricted"
      | "setOrigFeeShare"
      | "setPoolFee"
      | "setPoolParams"
      | "tokens"
      | "transferOwnership"
      | "unpausePoolFunction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProtocol",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allPoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cfmm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool2",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "decimals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeToSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolFee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProtocolRestricted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "origFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausePoolFunction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "protocol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeToSetter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsProtocolRestricted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrigFeeShare",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolParams",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpausePoolFunction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cfmm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPool2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoolFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProtocolRestricted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "origFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausePoolFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsProtocolRestricted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrigFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPoolFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPoolParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpausePoolFunction",
    data: BytesLike
  ): Result;

  events: {
    "FeeUpdate(address,address,uint16,uint16,bool)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolCreated(address,address,uint16,address,address[],uint256)": EventFragment;
    "PoolParamsUpdate(address,uint16,uint8,uint8,uint8,uint8,uint16,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolParamsUpdate"): EventFragment;
}

export interface FeeUpdateEventObject {
  pool: string;
  to: string;
  protocolFee: number;
  origFeeShare: number;
  isSet: boolean;
}
export type FeeUpdateEvent = TypedEvent<
  [string, string, number, number, boolean],
  FeeUpdateEventObject
>;

export type FeeUpdateEventFilter = TypedEventFilter<FeeUpdateEvent>;

export interface OwnershipTransferStartedEventObject {
  currentOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolCreatedEventObject {
  pool: string;
  cfmm: string;
  protocolId: number;
  implementation: string;
  tokens: string[];
  count: BigNumber;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string, number, string, string[], BigNumber],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolParamsUpdateEventObject {
  pool: string;
  origFee: number;
  extSwapFee: number;
  emaMultiplier: number;
  minUtilRate1: number;
  minUtilRate2: number;
  feeDivisor: number;
  liquidationFee: number;
  ltvThreshold: number;
}
export type PoolParamsUpdateEvent = TypedEvent<
  [string, number, number, number, number, number, number, number, number],
  PoolParamsUpdateEventObject
>;

export type PoolParamsUpdateEventFilter =
  TypedEventFilter<PoolParamsUpdateEvent>;

export interface TestGammaPoolFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestGammaPoolFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProtocol(
      _protocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    cfmm(overrides?: CallOverrides): Promise<[string]>;

    createPool(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createPool2(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    fee(overrides?: CallOverrides): Promise<[number]>;

    feeInfo(overrides?: CallOverrides): Promise<[string, BigNumber, BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    feeToSetter(overrides?: CallOverrides): Promise<[string]>;

    getKey(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPool(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPoolFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, boolean]>;

    getPools(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _pools: string[] }>;

    getProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isProtocolRestricted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    origFeeShare(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pausePoolFunction(
      _pool: PromiseOrValue<string>,
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    protocol(overrides?: CallOverrides): Promise<[string]>;

    protocolId(overrides?: CallOverrides): Promise<[number]>;

    removeProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeToSetter(
      _feeToSetter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsProtocolRestricted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOrigFeeShare(
      _origFeeShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolFee(
      _pool: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _origFeeShare: PromiseOrValue<BigNumberish>,
      _isSet: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolParams(
      _pool: PromiseOrValue<string>,
      _origFee: PromiseOrValue<BigNumberish>,
      _extSwapFee: PromiseOrValue<BigNumberish>,
      _emaMultiplier: PromiseOrValue<BigNumberish>,
      _minUtilRate1: PromiseOrValue<BigNumberish>,
      _minUtilRate2: PromiseOrValue<BigNumberish>,
      _feeDivisor: PromiseOrValue<BigNumberish>,
      _liquidationFee: PromiseOrValue<BigNumberish>,
      _ltvThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpausePoolFunction(
      _pool: PromiseOrValue<string>,
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProtocol(
    _protocol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  cfmm(overrides?: CallOverrides): Promise<string>;

  createPool(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>[],
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createPool2(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  deployer(overrides?: CallOverrides): Promise<string>;

  fee(overrides?: CallOverrides): Promise<number>;

  feeInfo(overrides?: CallOverrides): Promise<[string, BigNumber, BigNumber]>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  feeToSetter(overrides?: CallOverrides): Promise<string>;

  getKey(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPool(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPoolFee(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, BigNumber, boolean]>;

  getPools(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getProtocol(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isProtocolRestricted(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  origFeeShare(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  pausePoolFunction(
    _pool: PromiseOrValue<string>,
    _functionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  protocol(overrides?: CallOverrides): Promise<string>;

  protocolId(overrides?: CallOverrides): Promise<number>;

  removeProtocol(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(
    _feeTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeToSetter(
    _feeToSetter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsProtocolRestricted(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOrigFeeShare(
    _origFeeShare: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolFee(
    _pool: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _protocolFee: PromiseOrValue<BigNumberish>,
    _origFeeShare: PromiseOrValue<BigNumberish>,
    _isSet: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolParams(
    _pool: PromiseOrValue<string>,
    _origFee: PromiseOrValue<BigNumberish>,
    _extSwapFee: PromiseOrValue<BigNumberish>,
    _emaMultiplier: PromiseOrValue<BigNumberish>,
    _minUtilRate1: PromiseOrValue<BigNumberish>,
    _minUtilRate2: PromiseOrValue<BigNumberish>,
    _feeDivisor: PromiseOrValue<BigNumberish>,
    _liquidationFee: PromiseOrValue<BigNumberish>,
    _ltvThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpausePoolFunction(
    _pool: PromiseOrValue<string>,
    _functionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addProtocol(
      _protocol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    cfmm(overrides?: CallOverrides): Promise<string>;

    createPool(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    createPool2(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    decimals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    deployer(overrides?: CallOverrides): Promise<string>;

    fee(overrides?: CallOverrides): Promise<number>;

    feeInfo(overrides?: CallOverrides): Promise<[string, BigNumber, BigNumber]>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    feeToSetter(overrides?: CallOverrides): Promise<string>;

    getKey(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPool(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPoolFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, boolean]>;

    getPools(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isProtocolRestricted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    origFeeShare(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    pausePoolFunction(
      _pool: PromiseOrValue<string>,
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    protocol(overrides?: CallOverrides): Promise<string>;

    protocolId(overrides?: CallOverrides): Promise<number>;

    removeProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeToSetter(
      _feeToSetter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsProtocolRestricted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrigFeeShare(
      _origFeeShare: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFee(
      _pool: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _origFeeShare: PromiseOrValue<BigNumberish>,
      _isSet: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolParams(
      _pool: PromiseOrValue<string>,
      _origFee: PromiseOrValue<BigNumberish>,
      _extSwapFee: PromiseOrValue<BigNumberish>,
      _emaMultiplier: PromiseOrValue<BigNumberish>,
      _minUtilRate1: PromiseOrValue<BigNumberish>,
      _minUtilRate2: PromiseOrValue<BigNumberish>,
      _feeDivisor: PromiseOrValue<BigNumberish>,
      _liquidationFee: PromiseOrValue<BigNumberish>,
      _ltvThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpausePoolFunction(
      _pool: PromiseOrValue<string>,
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FeeUpdate(address,address,uint16,uint16,bool)"(
      pool?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      protocolFee?: null,
      origFeeShare?: null,
      isSet?: null
    ): FeeUpdateEventFilter;
    FeeUpdate(
      pool?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      protocolFee?: null,
      origFeeShare?: null,
      isSet?: null
    ): FeeUpdateEventFilter;

    "OwnershipTransferStarted(address,address)"(
      currentOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      currentOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolCreated(address,address,uint16,address,address[],uint256)"(
      pool?: PromiseOrValue<string> | null,
      cfmm?: PromiseOrValue<string> | null,
      protocolId?: PromiseOrValue<BigNumberish> | null,
      implementation?: null,
      tokens?: null,
      count?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      pool?: PromiseOrValue<string> | null,
      cfmm?: PromiseOrValue<string> | null,
      protocolId?: PromiseOrValue<BigNumberish> | null,
      implementation?: null,
      tokens?: null,
      count?: null
    ): PoolCreatedEventFilter;

    "PoolParamsUpdate(address,uint16,uint8,uint8,uint8,uint8,uint16,uint8,uint8)"(
      pool?: PromiseOrValue<string> | null,
      origFee?: null,
      extSwapFee?: null,
      emaMultiplier?: null,
      minUtilRate1?: null,
      minUtilRate2?: null,
      feeDivisor?: null,
      liquidationFee?: null,
      ltvThreshold?: null
    ): PoolParamsUpdateEventFilter;
    PoolParamsUpdate(
      pool?: PromiseOrValue<string> | null,
      origFee?: null,
      extSwapFee?: null,
      emaMultiplier?: null,
      minUtilRate1?: null,
      minUtilRate2?: null,
      feeDivisor?: null,
      liquidationFee?: null,
      ltvThreshold?: null
    ): PoolParamsUpdateEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProtocol(
      _protocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    cfmm(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createPool2(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeInfo(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    feeToSetter(overrides?: CallOverrides): Promise<BigNumber>;

    getKey(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPools(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProtocolRestricted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    origFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pausePoolFunction(
      _pool: PromiseOrValue<string>,
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    protocol(overrides?: CallOverrides): Promise<BigNumber>;

    protocolId(overrides?: CallOverrides): Promise<BigNumber>;

    removeProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeToSetter(
      _feeToSetter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsProtocolRestricted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOrigFeeShare(
      _origFeeShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolFee(
      _pool: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _origFeeShare: PromiseOrValue<BigNumberish>,
      _isSet: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolParams(
      _pool: PromiseOrValue<string>,
      _origFee: PromiseOrValue<BigNumberish>,
      _extSwapFee: PromiseOrValue<BigNumberish>,
      _emaMultiplier: PromiseOrValue<BigNumberish>,
      _minUtilRate1: PromiseOrValue<BigNumberish>,
      _minUtilRate2: PromiseOrValue<BigNumberish>,
      _feeDivisor: PromiseOrValue<BigNumberish>,
      _liquidationFee: PromiseOrValue<BigNumberish>,
      _ltvThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpausePoolFunction(
      _pool: PromiseOrValue<string>,
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProtocol(
      _protocol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cfmm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<string>[],
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createPool2(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeToSetter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKey(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolFee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProtocolRestricted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    origFeeShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausePoolFunction(
      _pool: PromiseOrValue<string>,
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeToSetter(
      _feeToSetter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsProtocolRestricted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOrigFeeShare(
      _origFeeShare: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolFee(
      _pool: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _protocolFee: PromiseOrValue<BigNumberish>,
      _origFeeShare: PromiseOrValue<BigNumberish>,
      _isSet: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolParams(
      _pool: PromiseOrValue<string>,
      _origFee: PromiseOrValue<BigNumberish>,
      _extSwapFee: PromiseOrValue<BigNumberish>,
      _emaMultiplier: PromiseOrValue<BigNumberish>,
      _minUtilRate1: PromiseOrValue<BigNumberish>,
      _minUtilRate2: PromiseOrValue<BigNumberish>,
      _feeDivisor: PromiseOrValue<BigNumberish>,
      _liquidationFee: PromiseOrValue<BigNumberish>,
      _ltvThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpausePoolFunction(
      _pool: PromiseOrValue<string>,
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
