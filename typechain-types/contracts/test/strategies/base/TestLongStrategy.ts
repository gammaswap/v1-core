/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface TestLongStrategyInterface extends utils.Interface {
  functions: {
    "_borrowLiquidity(uint256,uint256,uint256[])": FunctionFragment;
    "_decreaseCollateral(uint256,uint128[],address,uint256[])": FunctionFragment;
    "_increaseCollateral(uint256,uint256[])": FunctionFragment;
    "_repayLiquidity(uint256,uint256,uint256,address)": FunctionFragment;
    "_repayLiquiditySetRatio(uint256,uint256,uint256[])": FunctionFragment;
    "_repayLiquidityWithLP(uint256,uint256,address)": FunctionFragment;
    "borrowRate()": FunctionFragment;
    "calcDynamicOriginationFee(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "chargeLPTokenInterest(uint256,uint256)": FunctionFragment;
    "checkMargin2(uint256)": FunctionFragment;
    "createLoan()": FunctionFragment;
    "getAccFeeIndex()": FunctionFragment;
    "getLoan(uint256)": FunctionFragment;
    "getLoanChangeData(uint256)": FunctionFragment;
    "getPoolData()": FunctionFragment;
    "initialize(address,address,uint16,address[],uint8[])": FunctionFragment;
    "ltvThreshold()": FunctionFragment;
    "origFee()": FunctionFragment;
    "protocolId()": FunctionFragment;
    "rateParamsStore()": FunctionFragment;
    "setAccFeeIndex(uint80)": FunctionFragment;
    "setBorrowRate(uint80)": FunctionFragment;
    "setCfmmReserves(uint128[])": FunctionFragment;
    "setCurrentCFMMPrice(uint256)": FunctionFragment;
    "setHeldAmounts(uint256,uint128[])": FunctionFragment;
    "setLPTokenBalance(uint256,uint256,uint256,uint256)": FunctionFragment;
    "setLPTokenLoanBalance(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setLiquidity(uint256,uint128)": FunctionFragment;
    "setLoanLiquidity(uint256,uint128)": FunctionFragment;
    "setMinBorrow(uint256)": FunctionFragment;
    "setOriginationFee(uint16)": FunctionFragment;
    "squareRoot(uint256)": FunctionFragment;
    "testGetReserves(address)": FunctionFragment;
    "testGetUnfundedAmounts(uint128[],uint128[])": FunctionFragment;
    "testOpenLoan(uint256,uint256)": FunctionFragment;
    "testPayLoan(uint256,uint256)": FunctionFragment;
    "testUpdateIndex()": FunctionFragment;
    "testUpdateLoan(uint256)": FunctionFragment;
    "testUpdateLoanLiquidity(uint256,uint80)": FunctionFragment;
    "testUpdateLoanPrice(uint256,uint256,uint256,uint256)": FunctionFragment;
    "testUpdatePayableLoan(uint256,uint256)": FunctionFragment;
    "tokenBalances()": FunctionFragment;
    "tokens()": FunctionFragment;
    "validateParameters(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_borrowLiquidity"
      | "_decreaseCollateral"
      | "_increaseCollateral"
      | "_repayLiquidity"
      | "_repayLiquiditySetRatio"
      | "_repayLiquidityWithLP"
      | "borrowRate"
      | "calcDynamicOriginationFee"
      | "chargeLPTokenInterest"
      | "checkMargin2"
      | "createLoan"
      | "getAccFeeIndex"
      | "getLoan"
      | "getLoanChangeData"
      | "getPoolData"
      | "initialize"
      | "ltvThreshold"
      | "origFee"
      | "protocolId"
      | "rateParamsStore"
      | "setAccFeeIndex"
      | "setBorrowRate"
      | "setCfmmReserves"
      | "setCurrentCFMMPrice"
      | "setHeldAmounts"
      | "setLPTokenBalance"
      | "setLPTokenLoanBalance"
      | "setLiquidity"
      | "setLoanLiquidity"
      | "setMinBorrow"
      | "setOriginationFee"
      | "squareRoot"
      | "testGetReserves"
      | "testGetUnfundedAmounts"
      | "testOpenLoan"
      | "testPayLoan"
      | "testUpdateIndex"
      | "testUpdateLoan"
      | "testUpdateLoanLiquidity"
      | "testUpdateLoanPrice"
      | "testUpdatePayableLoan"
      | "tokenBalances"
      | "tokens"
      | "validateParameters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_borrowLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_decreaseCollateral",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_increaseCollateral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_repayLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_repayLiquiditySetRatio",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_repayLiquidityWithLP",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcDynamicOriginationFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chargeLPTokenInterest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMargin2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccFeeIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanChangeData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ltvThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "origFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateParamsStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAccFeeIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCfmmReserves",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentCFMMPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHeldAmounts",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPTokenBalance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLPTokenLoanBalance",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLoanLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBorrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOriginationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "squareRoot",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetReserves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "testGetUnfundedAmounts",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "testOpenLoan",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "testPayLoan",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "testUpdateIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testUpdateLoan",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "testUpdateLoanLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "testUpdateLoanPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testUpdatePayableLoan",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateParameters",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_borrowLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_decreaseCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_increaseCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_repayLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_repayLiquiditySetRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_repayLiquidityWithLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcDynamicOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargeLPTokenInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMargin2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccFeeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLoanChangeData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ltvThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "origFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateParamsStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccFeeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCfmmReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentCFMMPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHeldAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLPTokenLoanBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLoanLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOriginationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "squareRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testGetReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testGetUnfundedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testOpenLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testPayLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpdateIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpdateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpdateLoanLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpdateLoanPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testUpdatePayableLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateParameters",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityAndDeltas(uint256,uint256,uint256,uint256)": EventFragment;
    "LoanCreated(address,uint256)": EventFragment;
    "LoanUpdated(uint256,uint128[],uint128,uint128,uint256,uint96,uint8)": EventFragment;
    "PoolUpdated(uint256,uint256,uint40,uint80,uint256,uint128,uint128,uint128[],uint8)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAndDeltas"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface LiquidityAndDeltasEventObject {
  liquidity: BigNumber;
  delta0: BigNumber;
  delta1: BigNumber;
  deltaLen: BigNumber;
}
export type LiquidityAndDeltasEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidityAndDeltasEventObject
>;

export type LiquidityAndDeltasEventFilter =
  TypedEventFilter<LiquidityAndDeltasEvent>;

export interface LoanCreatedEventObject {
  caller: string;
  tokenId: BigNumber;
}
export type LoanCreatedEvent = TypedEvent<
  [string, BigNumber],
  LoanCreatedEventObject
>;

export type LoanCreatedEventFilter = TypedEventFilter<LoanCreatedEvent>;

export interface LoanUpdatedEventObject {
  tokenId: BigNumber;
  tokensHeld: BigNumber[];
  liquidity: BigNumber;
  initLiquidity: BigNumber;
  lpTokens: BigNumber;
  rateIndex: BigNumber;
  txType: number;
}
export type LoanUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber, BigNumber, BigNumber, BigNumber, number],
  LoanUpdatedEventObject
>;

export type LoanUpdatedEventFilter = TypedEventFilter<LoanUpdatedEvent>;

export interface PoolUpdatedEventObject {
  lpTokenBalance: BigNumber;
  lpTokenBorrowed: BigNumber;
  lastBlockNumber: number;
  accFeeIndex: BigNumber;
  lpTokenBorrowedPlusInterest: BigNumber;
  lpInvariant: BigNumber;
  borrowedInvariant: BigNumber;
  cfmmReserves: BigNumber[];
  txType: number;
}
export type PoolUpdatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    number
  ],
  PoolUpdatedEventObject
>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TestLongStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestLongStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _borrowLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _decreaseCollateral(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _increaseCollateral(
      tokenId: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _repayLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      payLiquidity: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _repayLiquiditySetRatio(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _repayLiquidityWithLP(
      tokenId: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    calcDynamicOriginationFee(
      baseOrigFee: PromiseOrValue<BigNumberish>,
      utilRate: PromiseOrValue<BigNumberish>,
      lowUtilRate: PromiseOrValue<BigNumberish>,
      minUtilRate1: PromiseOrValue<BigNumberish>,
      minUtilRate2: PromiseOrValue<BigNumberish>,
      feeDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { origFee: BigNumber }>;

    chargeLPTokenInterest(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokenInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkMargin2(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createLoan(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccFeeIndex(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accFeeIndex: BigNumber }>;

    getLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        poolId: string;
        tokensHeld: BigNumber[];
        heldLiquidity: BigNumber;
        initLiquidity: BigNumber;
        liquidity: BigNumber;
        lpTokens: BigNumber;
        rateIndex: BigNumber;
      }
    >;

    getLoanChangeData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        loanLiquidity: BigNumber;
        initLiquidity: BigNumber;
        loanLpTokens: BigNumber;
        loanPx: BigNumber;
        borrowedInvariant: BigNumber;
        lpInvariant: BigNumber;
        totalInvariant: BigNumber;
        lpTokenBorrowed: BigNumber;
        lpTokenBalance: BigNumber;
        lpTokenBorrowedPlusInterest: BigNumber;
        lpTokenTotal: BigNumber;
        lastCFMMInvariant: BigNumber;
        lastCFMMTotalSupply: BigNumber;
      }
    >;

    getPoolData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        LP_TOKEN_BALANCE: BigNumber;
        LP_TOKEN_BORROWED: BigNumber;
        LAST_BLOCK_NUMBER: number;
        accFeeIndex: BigNumber;
        LP_TOKEN_BORROWED_PLUS_INTEREST: BigNumber;
        LP_INVARIANT: BigNumber;
        BORROWED_INVARIANT: BigNumber;
        CFMM_RESERVES: BigNumber[];
      }
    >;

    initialize(
      _factory: PromiseOrValue<string>,
      _cfmm: PromiseOrValue<string>,
      _protocolId: PromiseOrValue<BigNumberish>,
      _tokens: PromiseOrValue<string>[],
      _decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ltvThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    origFee(overrides?: CallOverrides): Promise<[number]>;

    protocolId(overrides?: CallOverrides): Promise<[number]>;

    rateParamsStore(overrides?: CallOverrides): Promise<[string]>;

    setAccFeeIndex(
      accFeeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrowRate(
      _borrowRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCfmmReserves(
      reserves: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrentCFMMPrice(
      _currPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHeldAmounts(
      tokenId: PromiseOrValue<BigNumberish>,
      heldAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLPTokenBalance(
      lpInvariant: PromiseOrValue<BigNumberish>,
      lpTokenBalance: PromiseOrValue<BigNumberish>,
      lastCFMMInvariant: PromiseOrValue<BigNumberish>,
      lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLPTokenLoanBalance(
      tokenId: PromiseOrValue<BigNumberish>,
      lpInvariant: PromiseOrValue<BigNumberish>,
      lpTokenBalance: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      lastCFMMInvariant: PromiseOrValue<BigNumberish>,
      lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLoanLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinBorrow(
      _newMinBorrow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOriginationFee(
      _origFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    squareRoot(
      num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    testGetReserves(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    testGetUnfundedAmounts(
      amounts: PromiseOrValue<BigNumberish>[],
      tokensHeld: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber[], BigNumber[]] & {
        hasUnfundedAmounts: boolean;
        unfundedAmounts: BigNumber[];
        _tokensHeld: BigNumber[];
      }
    >;

    testOpenLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testPayLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testUpdateIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testUpdateLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testUpdateLoanLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      accFeeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testUpdateLoanPrice(
      newLiquidity: PromiseOrValue<BigNumberish>,
      currPrice: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      lastPx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    testUpdatePayableLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      payLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenBalances(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    tokens(overrides?: CallOverrides): Promise<[string[]]>;

    validateParameters(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _borrowLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    lpTokens: PromiseOrValue<BigNumberish>,
    ratio: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _decreaseCollateral(
    tokenId: PromiseOrValue<BigNumberish>,
    amounts: PromiseOrValue<BigNumberish>[],
    to: PromiseOrValue<string>,
    ratio: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _increaseCollateral(
    tokenId: PromiseOrValue<BigNumberish>,
    ratio: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _repayLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    payLiquidity: PromiseOrValue<BigNumberish>,
    collateralId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _repayLiquiditySetRatio(
    tokenId: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    ratio: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _repayLiquidityWithLP(
    tokenId: PromiseOrValue<BigNumberish>,
    collateralId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowRate(overrides?: CallOverrides): Promise<BigNumber>;

  calcDynamicOriginationFee(
    baseOrigFee: PromiseOrValue<BigNumberish>,
    utilRate: PromiseOrValue<BigNumberish>,
    lowUtilRate: PromiseOrValue<BigNumberish>,
    minUtilRate1: PromiseOrValue<BigNumberish>,
    minUtilRate2: PromiseOrValue<BigNumberish>,
    feeDivisor: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chargeLPTokenInterest(
    tokenId: PromiseOrValue<BigNumberish>,
    lpTokenInterest: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkMargin2(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createLoan(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccFeeIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getLoan(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber[],
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      poolId: string;
      tokensHeld: BigNumber[];
      heldLiquidity: BigNumber;
      initLiquidity: BigNumber;
      liquidity: BigNumber;
      lpTokens: BigNumber;
      rateIndex: BigNumber;
    }
  >;

  getLoanChangeData(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      loanLiquidity: BigNumber;
      initLiquidity: BigNumber;
      loanLpTokens: BigNumber;
      loanPx: BigNumber;
      borrowedInvariant: BigNumber;
      lpInvariant: BigNumber;
      totalInvariant: BigNumber;
      lpTokenBorrowed: BigNumber;
      lpTokenBalance: BigNumber;
      lpTokenBorrowedPlusInterest: BigNumber;
      lpTokenTotal: BigNumber;
      lastCFMMInvariant: BigNumber;
      lastCFMMTotalSupply: BigNumber;
    }
  >;

  getPoolData(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      LP_TOKEN_BALANCE: BigNumber;
      LP_TOKEN_BORROWED: BigNumber;
      LAST_BLOCK_NUMBER: number;
      accFeeIndex: BigNumber;
      LP_TOKEN_BORROWED_PLUS_INTEREST: BigNumber;
      LP_INVARIANT: BigNumber;
      BORROWED_INVARIANT: BigNumber;
      CFMM_RESERVES: BigNumber[];
    }
  >;

  initialize(
    _factory: PromiseOrValue<string>,
    _cfmm: PromiseOrValue<string>,
    _protocolId: PromiseOrValue<BigNumberish>,
    _tokens: PromiseOrValue<string>[],
    _decimals: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ltvThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  origFee(overrides?: CallOverrides): Promise<number>;

  protocolId(overrides?: CallOverrides): Promise<number>;

  rateParamsStore(overrides?: CallOverrides): Promise<string>;

  setAccFeeIndex(
    accFeeIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrowRate(
    _borrowRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCfmmReserves(
    reserves: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrentCFMMPrice(
    _currPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHeldAmounts(
    tokenId: PromiseOrValue<BigNumberish>,
    heldAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLPTokenBalance(
    lpInvariant: PromiseOrValue<BigNumberish>,
    lpTokenBalance: PromiseOrValue<BigNumberish>,
    lastCFMMInvariant: PromiseOrValue<BigNumberish>,
    lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLPTokenLoanBalance(
    tokenId: PromiseOrValue<BigNumberish>,
    lpInvariant: PromiseOrValue<BigNumberish>,
    lpTokenBalance: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    lpTokens: PromiseOrValue<BigNumberish>,
    lastCFMMInvariant: PromiseOrValue<BigNumberish>,
    lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLoanLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinBorrow(
    _newMinBorrow: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOriginationFee(
    _origFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  squareRoot(
    num: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testGetReserves(
    to: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  testGetUnfundedAmounts(
    amounts: PromiseOrValue<BigNumberish>[],
    tokensHeld: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber[], BigNumber[]] & {
      hasUnfundedAmounts: boolean;
      unfundedAmounts: BigNumber[];
      _tokensHeld: BigNumber[];
    }
  >;

  testOpenLoan(
    tokenId: PromiseOrValue<BigNumberish>,
    lpTokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testPayLoan(
    tokenId: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testUpdateIndex(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testUpdateLoan(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testUpdateLoanLiquidity(
    tokenId: PromiseOrValue<BigNumberish>,
    accFeeIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testUpdateLoanPrice(
    newLiquidity: PromiseOrValue<BigNumberish>,
    currPrice: PromiseOrValue<BigNumberish>,
    liquidity: PromiseOrValue<BigNumberish>,
    lastPx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  testUpdatePayableLoan(
    tokenId: PromiseOrValue<BigNumberish>,
    payLiquidity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

  tokens(overrides?: CallOverrides): Promise<string[]>;

  validateParameters(
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _borrowLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        liquidityBorrowed: BigNumber;
        amounts: BigNumber[];
      }
    >;

    _decreaseCollateral(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _increaseCollateral(
      tokenId: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _repayLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      payLiquidity: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        liquidityPaid: BigNumber;
        amounts: BigNumber[];
      }
    >;

    _repayLiquiditySetRatio(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        liquidityPaid: BigNumber;
        amounts: BigNumber[];
      }
    >;

    _repayLiquidityWithLP(
      tokenId: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        liquidityPaid: BigNumber;
        tokensHeld: BigNumber[];
      }
    >;

    borrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    calcDynamicOriginationFee(
      baseOrigFee: PromiseOrValue<BigNumberish>,
      utilRate: PromiseOrValue<BigNumberish>,
      lowUtilRate: PromiseOrValue<BigNumberish>,
      minUtilRate1: PromiseOrValue<BigNumberish>,
      minUtilRate2: PromiseOrValue<BigNumberish>,
      feeDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chargeLPTokenInterest(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokenInterest: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkMargin2(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createLoan(overrides?: CallOverrides): Promise<BigNumber>;

    getAccFeeIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber[],
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        poolId: string;
        tokensHeld: BigNumber[];
        heldLiquidity: BigNumber;
        initLiquidity: BigNumber;
        liquidity: BigNumber;
        lpTokens: BigNumber;
        rateIndex: BigNumber;
      }
    >;

    getLoanChangeData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        loanLiquidity: BigNumber;
        initLiquidity: BigNumber;
        loanLpTokens: BigNumber;
        loanPx: BigNumber;
        borrowedInvariant: BigNumber;
        lpInvariant: BigNumber;
        totalInvariant: BigNumber;
        lpTokenBorrowed: BigNumber;
        lpTokenBalance: BigNumber;
        lpTokenBorrowedPlusInterest: BigNumber;
        lpTokenTotal: BigNumber;
        lastCFMMInvariant: BigNumber;
        lastCFMMTotalSupply: BigNumber;
      }
    >;

    getPoolData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        LP_TOKEN_BALANCE: BigNumber;
        LP_TOKEN_BORROWED: BigNumber;
        LAST_BLOCK_NUMBER: number;
        accFeeIndex: BigNumber;
        LP_TOKEN_BORROWED_PLUS_INTEREST: BigNumber;
        LP_INVARIANT: BigNumber;
        BORROWED_INVARIANT: BigNumber;
        CFMM_RESERVES: BigNumber[];
      }
    >;

    initialize(
      _factory: PromiseOrValue<string>,
      _cfmm: PromiseOrValue<string>,
      _protocolId: PromiseOrValue<BigNumberish>,
      _tokens: PromiseOrValue<string>[],
      _decimals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    ltvThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    origFee(overrides?: CallOverrides): Promise<number>;

    protocolId(overrides?: CallOverrides): Promise<number>;

    rateParamsStore(overrides?: CallOverrides): Promise<string>;

    setAccFeeIndex(
      accFeeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowRate(
      _borrowRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCfmmReserves(
      reserves: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentCFMMPrice(
      _currPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHeldAmounts(
      tokenId: PromiseOrValue<BigNumberish>,
      heldAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setLPTokenBalance(
      lpInvariant: PromiseOrValue<BigNumberish>,
      lpTokenBalance: PromiseOrValue<BigNumberish>,
      lastCFMMInvariant: PromiseOrValue<BigNumberish>,
      lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLPTokenLoanBalance(
      tokenId: PromiseOrValue<BigNumberish>,
      lpInvariant: PromiseOrValue<BigNumberish>,
      lpTokenBalance: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      lastCFMMInvariant: PromiseOrValue<BigNumberish>,
      lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLoanLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBorrow(
      _newMinBorrow: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOriginationFee(
      _origFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    squareRoot(
      num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetReserves(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    testGetUnfundedAmounts(
      amounts: PromiseOrValue<BigNumberish>[],
      tokensHeld: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber[], BigNumber[]] & {
        hasUnfundedAmounts: boolean;
        unfundedAmounts: BigNumber[];
        _tokensHeld: BigNumber[];
      }
    >;

    testOpenLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testPayLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testUpdateIndex(overrides?: CallOverrides): Promise<void>;

    testUpdateLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testUpdateLoanLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      accFeeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    testUpdateLoanPrice(
      newLiquidity: PromiseOrValue<BigNumberish>,
      currPrice: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      lastPx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testUpdatePayableLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      payLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenBalances(overrides?: CallOverrides): Promise<BigNumber[]>;

    tokens(overrides?: CallOverrides): Promise<string[]>;

    validateParameters(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "LiquidityAndDeltas(uint256,uint256,uint256,uint256)"(
      liquidity?: null,
      delta0?: null,
      delta1?: null,
      deltaLen?: null
    ): LiquidityAndDeltasEventFilter;
    LiquidityAndDeltas(
      liquidity?: null,
      delta0?: null,
      delta1?: null,
      deltaLen?: null
    ): LiquidityAndDeltasEventFilter;

    "LoanCreated(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      tokenId?: null
    ): LoanCreatedEventFilter;
    LoanCreated(
      caller?: PromiseOrValue<string> | null,
      tokenId?: null
    ): LoanCreatedEventFilter;

    "LoanUpdated(uint256,uint128[],uint128,uint128,uint256,uint96,uint8)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokensHeld?: null,
      liquidity?: null,
      initLiquidity?: null,
      lpTokens?: null,
      rateIndex?: null,
      txType?: PromiseOrValue<BigNumberish> | null
    ): LoanUpdatedEventFilter;
    LoanUpdated(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tokensHeld?: null,
      liquidity?: null,
      initLiquidity?: null,
      lpTokens?: null,
      rateIndex?: null,
      txType?: PromiseOrValue<BigNumberish> | null
    ): LoanUpdatedEventFilter;

    "PoolUpdated(uint256,uint256,uint40,uint80,uint256,uint128,uint128,uint128[],uint8)"(
      lpTokenBalance?: null,
      lpTokenBorrowed?: null,
      lastBlockNumber?: null,
      accFeeIndex?: null,
      lpTokenBorrowedPlusInterest?: null,
      lpInvariant?: null,
      borrowedInvariant?: null,
      cfmmReserves?: null,
      txType?: PromiseOrValue<BigNumberish> | null
    ): PoolUpdatedEventFilter;
    PoolUpdated(
      lpTokenBalance?: null,
      lpTokenBorrowed?: null,
      lastBlockNumber?: null,
      accFeeIndex?: null,
      lpTokenBorrowedPlusInterest?: null,
      lpInvariant?: null,
      borrowedInvariant?: null,
      cfmmReserves?: null,
      txType?: PromiseOrValue<BigNumberish> | null
    ): PoolUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    _borrowLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _decreaseCollateral(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _increaseCollateral(
      tokenId: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _repayLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      payLiquidity: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _repayLiquiditySetRatio(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _repayLiquidityWithLP(
      tokenId: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowRate(overrides?: CallOverrides): Promise<BigNumber>;

    calcDynamicOriginationFee(
      baseOrigFee: PromiseOrValue<BigNumberish>,
      utilRate: PromiseOrValue<BigNumberish>,
      lowUtilRate: PromiseOrValue<BigNumberish>,
      minUtilRate1: PromiseOrValue<BigNumberish>,
      minUtilRate2: PromiseOrValue<BigNumberish>,
      feeDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chargeLPTokenInterest(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokenInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkMargin2(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createLoan(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccFeeIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoanChangeData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolData(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _factory: PromiseOrValue<string>,
      _cfmm: PromiseOrValue<string>,
      _protocolId: PromiseOrValue<BigNumberish>,
      _tokens: PromiseOrValue<string>[],
      _decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ltvThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    origFee(overrides?: CallOverrides): Promise<BigNumber>;

    protocolId(overrides?: CallOverrides): Promise<BigNumber>;

    rateParamsStore(overrides?: CallOverrides): Promise<BigNumber>;

    setAccFeeIndex(
      accFeeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrowRate(
      _borrowRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCfmmReserves(
      reserves: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrentCFMMPrice(
      _currPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHeldAmounts(
      tokenId: PromiseOrValue<BigNumberish>,
      heldAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLPTokenBalance(
      lpInvariant: PromiseOrValue<BigNumberish>,
      lpTokenBalance: PromiseOrValue<BigNumberish>,
      lastCFMMInvariant: PromiseOrValue<BigNumberish>,
      lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLPTokenLoanBalance(
      tokenId: PromiseOrValue<BigNumberish>,
      lpInvariant: PromiseOrValue<BigNumberish>,
      lpTokenBalance: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      lastCFMMInvariant: PromiseOrValue<BigNumberish>,
      lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLoanLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinBorrow(
      _newMinBorrow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOriginationFee(
      _origFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    squareRoot(
      num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetReserves(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testGetUnfundedAmounts(
      amounts: PromiseOrValue<BigNumberish>[],
      tokensHeld: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testOpenLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testPayLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testUpdateIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testUpdateLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testUpdateLoanLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      accFeeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testUpdateLoanPrice(
      newLiquidity: PromiseOrValue<BigNumberish>,
      currPrice: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      lastPx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testUpdatePayableLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      payLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenBalances(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    validateParameters(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _borrowLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _decreaseCollateral(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      to: PromiseOrValue<string>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _increaseCollateral(
      tokenId: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _repayLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      payLiquidity: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _repayLiquiditySetRatio(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      ratio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _repayLiquidityWithLP(
      tokenId: PromiseOrValue<BigNumberish>,
      collateralId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcDynamicOriginationFee(
      baseOrigFee: PromiseOrValue<BigNumberish>,
      utilRate: PromiseOrValue<BigNumberish>,
      lowUtilRate: PromiseOrValue<BigNumberish>,
      minUtilRate1: PromiseOrValue<BigNumberish>,
      minUtilRate2: PromiseOrValue<BigNumberish>,
      feeDivisor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chargeLPTokenInterest(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokenInterest: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkMargin2(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createLoan(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccFeeIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoanChangeData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _factory: PromiseOrValue<string>,
      _cfmm: PromiseOrValue<string>,
      _protocolId: PromiseOrValue<BigNumberish>,
      _tokens: PromiseOrValue<string>[],
      _decimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ltvThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    origFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateParamsStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAccFeeIndex(
      accFeeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowRate(
      _borrowRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCfmmReserves(
      reserves: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentCFMMPrice(
      _currPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHeldAmounts(
      tokenId: PromiseOrValue<BigNumberish>,
      heldAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLPTokenBalance(
      lpInvariant: PromiseOrValue<BigNumberish>,
      lpTokenBalance: PromiseOrValue<BigNumberish>,
      lastCFMMInvariant: PromiseOrValue<BigNumberish>,
      lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLPTokenLoanBalance(
      tokenId: PromiseOrValue<BigNumberish>,
      lpInvariant: PromiseOrValue<BigNumberish>,
      lpTokenBalance: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      lastCFMMInvariant: PromiseOrValue<BigNumberish>,
      lastCFMMTotalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLoanLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinBorrow(
      _newMinBorrow: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOriginationFee(
      _origFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    squareRoot(
      num: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetReserves(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testGetUnfundedAmounts(
      amounts: PromiseOrValue<BigNumberish>[],
      tokensHeld: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testOpenLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      lpTokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testPayLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testUpdateIndex(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testUpdateLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testUpdateLoanLiquidity(
      tokenId: PromiseOrValue<BigNumberish>,
      accFeeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testUpdateLoanPrice(
      newLiquidity: PromiseOrValue<BigNumberish>,
      currPrice: PromiseOrValue<BigNumberish>,
      liquidity: PromiseOrValue<BigNumberish>,
      lastPx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testUpdatePayableLoan(
      tokenId: PromiseOrValue<BigNumberish>,
      payLiquidity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateParameters(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
