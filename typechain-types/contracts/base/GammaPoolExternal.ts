/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface GammaPoolExternalInterface extends utils.Interface {
  functions: {
    "externalLiquidationStrategy()": FunctionFragment;
    "externalRebalanceStrategy()": FunctionFragment;
    "functionIds()": FunctionFragment;
    "isPaused(uint8)": FunctionFragment;
    "liquidateExternally(uint256,uint128[],uint256,address,bytes)": FunctionFragment;
    "pause(uint8)": FunctionFragment;
    "rebalanceExternally(uint256,uint128[],uint256,address,bytes)": FunctionFragment;
    "unpause(uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "externalLiquidationStrategy"
      | "externalRebalanceStrategy"
      | "functionIds"
      | "isPaused"
      | "liquidateExternally"
      | "pause"
      | "rebalanceExternally"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "externalLiquidationStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "externalRebalanceStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "functionIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPaused",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateExternally",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceExternally",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "externalLiquidationStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalRebalanceStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateExternally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceExternally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Pause(address,uint8)": EventFragment;
    "Unpause(address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
}

export interface PauseEventObject {
  account: string;
  _functionId: number;
}
export type PauseEvent = TypedEvent<[string, number], PauseEventObject>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export interface UnpauseEventObject {
  account: string;
  _functionId: number;
}
export type UnpauseEvent = TypedEvent<[string, number], UnpauseEventObject>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface GammaPoolExternal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GammaPoolExternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    externalLiquidationStrategy(overrides?: CallOverrides): Promise<[string]>;

    externalRebalanceStrategy(overrides?: CallOverrides): Promise<[string]>;

    functionIds(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPaused(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidateExternally(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      lpTokens: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebalanceExternally(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      lpTokens: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  externalLiquidationStrategy(overrides?: CallOverrides): Promise<string>;

  externalRebalanceStrategy(overrides?: CallOverrides): Promise<string>;

  functionIds(overrides?: CallOverrides): Promise<BigNumber>;

  isPaused(
    _functionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateExternally(
    tokenId: PromiseOrValue<BigNumberish>,
    amounts: PromiseOrValue<BigNumberish>[],
    lpTokens: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    _functionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebalanceExternally(
    tokenId: PromiseOrValue<BigNumberish>,
    amounts: PromiseOrValue<BigNumberish>[],
    lpTokens: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    _functionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    externalLiquidationStrategy(overrides?: CallOverrides): Promise<string>;

    externalRebalanceStrategy(overrides?: CallOverrides): Promise<string>;

    functionIds(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateExternally(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      lpTokens: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        loanLiquidity: BigNumber;
        refund: BigNumber[];
      }
    >;

    pause(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalanceExternally(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      lpTokens: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        loanLiquidity: BigNumber;
        tokensHeld: BigNumber[];
      }
    >;

    unpause(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Pause(address,uint8)"(
      account?: null,
      _functionId?: null
    ): PauseEventFilter;
    Pause(account?: null, _functionId?: null): PauseEventFilter;

    "Unpause(address,uint8)"(
      account?: null,
      _functionId?: null
    ): UnpauseEventFilter;
    Unpause(account?: null, _functionId?: null): UnpauseEventFilter;
  };

  estimateGas: {
    externalLiquidationStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    externalRebalanceStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    functionIds(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateExternally(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      lpTokens: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebalanceExternally(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      lpTokens: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    externalLiquidationStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    externalRebalanceStrategy(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateExternally(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      lpTokens: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceExternally(
      tokenId: PromiseOrValue<BigNumberish>,
      amounts: PromiseOrValue<BigNumberish>[],
      lpTokens: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      _functionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
