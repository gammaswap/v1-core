/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestRepayStrategy2,
  TestRepayStrategy2Interface,
} from "../../../../contracts/test/strategies/TestRepayStrategy2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint128[]",
        name: "tokensHeld",
        type: "uint128[]",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "initLiquidity",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lpTokens",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "rateIndex",
        type: "uint96",
      },
      {
        indexed: true,
        internalType: "enum IStrategyEvents.TX_TYPE",
        name: "txType",
        type: "uint8",
      },
    ],
    name: "LoanUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "lpTokenBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lpTokenBorrowed",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint40",
        name: "lastBlockNumber",
        type: "uint40",
      },
      {
        indexed: false,
        internalType: "uint80",
        name: "accFeeIndex",
        type: "uint80",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lpTokenBorrowedPlusInterest",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "lpInvariant",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "borrowedInvariant",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint128[]",
        name: "cfmmReserves",
        type: "uint128[]",
      },
      {
        indexed: true,
        internalType: "enum IStrategyEvents.TX_TYPE",
        name: "txType",
        type: "uint8",
      },
    ],
    name: "PoolUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "_repayLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidityPaid",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "liquidity",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "ratio",
        type: "uint256[]",
      },
    ],
    name: "_repayLiquiditySetRatio",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidityPaid",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "_repayLiquidityWithLP",
    outputs: [
      {
        internalType: "uint256",
        name: "liquidityPaid",
        type: "uint256",
      },
      {
        internalType: "uint128[]",
        name: "tokensHeld",
        type: "uint128[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ltvThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061066c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806308b5607f14610051578063a7fa84951461007b578063aedd2dfc1461009c578063faf6f77e146100ac575b600080fd5b61006461005f3660046103e1565b6100bf565b60405161007292919061045a565b60405180910390f35b61008e61008936600461047b565b610194565b6040516100729291906104fe565b604051611f408152602001610072565b61008e6100ba36600461054c565b6102d1565b60408051600280825260608083018452869390929190602083019080368337019050509050600b816000815181106100f9576100f961058b565b60200260200101906001600160801b031690816001600160801b031681525050600c8160018151811061012e5761012e61058b565b6001600160801b0390921660209283029190910190910152600a857f7bf0a3a9ee9fadc885e719ee0a5e8444952053eb0abf88a6001af3a0701bc4b68361019060288960146040516101849594939291906105a1565b60405180910390a3935093915050565b604080516002808252606080830184528793909291906020830190803683370190505090506009816000815181106101ce576101ce61058b565b602002602001018181525050600a816001815181106101ef576101ef61058b565b602090810291909101015260408051600280825260608201909252600091816020016020820280368337019050509050600d816000815181106102345761023461058b565b60200260200101906001600160801b031690816001600160801b031681525050600b816001815181106102695761026961058b565b6001600160801b039092166020928302919091019091015260095b877f7bf0a3a9ee9fadc885e719ee0a5e8444952053eb0abf88a6001af3a0701bc4b68389602a602b602c6040516102bf9594939291906105ed565b60405180910390a35094509492505050565b6040805160028082526060808301845287939092919060208301908036833701905050905060098160008151811061030b5761030b61058b565b602002602001018181525050600a8160018151811061032c5761032c61058b565b6020908102919091010152604080516002808252606082019092526000918160200160208202803683370190505090506009816000815181106103715761037161058b565b60200260200101906001600160801b031690816001600160801b031681525050600a816001815181106103a6576103a661058b565b6001600160801b03909216602092830291909101909101526008610284565b80356001600160a01b03811681146103dc57600080fd5b919050565b6000806000606084860312156103f657600080fd5b833592506020840135915061040d604085016103c5565b90509250925092565b600081518084526020808501945080840160005b8381101561044f5781516001600160801b03168752958201959082019060010161042a565b509495945050505050565b8281526040602082015260006104736040830184610416565b949350505050565b6000806000806060858703121561049157600080fd5b8435935060208501359250604085013567ffffffffffffffff808211156104b757600080fd5b818701915087601f8301126104cb57600080fd5b8135818111156104da57600080fd5b8860208260051b85010111156104ef57600080fd5b95989497505060200194505050565b6000604082018483526020604081850152818551808452606086019150828701935060005b8181101561053f57845183529383019391830191600101610523565b5090979650505050505050565b6000806000806080858703121561056257600080fd5b843593506020850135925060408501359150610580606086016103c5565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b60a0815260006105b460a0830188610416565b6001600160801b03968716602084015294909516604082015260ff9290921660608301526001600160601b031660809091015292915050565b60a08152600061060060a0830188610416565b6001600160801b03968716602084015294909516604082015260608101929092526001600160601b03166080909101529291505056fea26469706673582212208f1d5562c59b2d177f59a7d44c7342c8f11095b132d442cc51de627b7b78354f64736f6c63430008130033";

type TestRepayStrategy2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestRepayStrategy2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestRepayStrategy2__factory extends ContractFactory {
  constructor(...args: TestRepayStrategy2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestRepayStrategy2> {
    return super.deploy(overrides || {}) as Promise<TestRepayStrategy2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestRepayStrategy2 {
    return super.attach(address) as TestRepayStrategy2;
  }
  override connect(signer: Signer): TestRepayStrategy2__factory {
    return super.connect(signer) as TestRepayStrategy2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRepayStrategy2Interface {
    return new utils.Interface(_abi) as TestRepayStrategy2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestRepayStrategy2 {
    return new Contract(address, _abi, signerOrProvider) as TestRepayStrategy2;
  }
}
