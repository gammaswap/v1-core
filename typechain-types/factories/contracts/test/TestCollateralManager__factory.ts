/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestCollateralManager,
  TestCollateralManagerInterface,
} from "../../../contracts/test/TestCollateralManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_refId",
        type: "uint16",
      },
      {
        internalType: "bool",
        name: "validate_",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "gammaPool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cfmm",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "protocolId",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "liquidateCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "cfmm",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "protocolId",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onLoanUpdate",
    outputs: [
      {
        internalType: "uint256",
        name: "collateral",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "refId",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "refType",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "gammaPool",
        type: "address",
      },
    ],
    name: "validate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516109a03803806109a083398101604081905261002f9161011a565b6001600160a01b03831660805261ffff821660a052600360c0819052839083908290829061006363ab90b69160e01b610097565b50505061007c633b3e7aab60e01b61009760201b60201c565b50506001805460ff19169115159190911790555061017f9050565b6001600160e01b031980821690036100f55760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b60008060006060848603121561012f57600080fd5b83516001600160a01b038116811461014657600080fd5b602085015190935061ffff8116811461015e57600080fd5b6040850151909250801515811461017457600080fd5b809150509250925092565b60805160a05160c0516107eb6101b560003960006101820152600061014801526000818161010901526102da01526107eb6000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c806301ffc9a71461007d578063207c64fb146100a5578063465a276d146100bd57806358024fce146100de578063633c3565146100f1578063c45a015514610104578063f4e444a114610143578063fd08b0f31461017d575b600080fd5b61009061008b3660046103d4565b6101a4565b60405190151581526020015b60405180910390f35b6100906100b3366004610416565b5060015460ff1690565b6100d06100cb3660046104ba565b6101e4565b60405190815260200161009c565b6100d06100ec36600461057c565b61024a565b6100d06100ff3660046105a8565b610256565b61012b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161009c565b61016a7f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff909116815260200161009c565b61016a7f000000000000000000000000000000000000000000000000000000000000000081565b60006301ffc9a760e01b6001600160e01b0319831614806101de57506001600160e01b0319821660009081526020819052604090205460ff165b92915050565b6000806101f1868661029b565b9050336001600160a01b038216146102245760405162461bcd60e51b815260040161021b90610605565b60405180910390fd5b6064915060008380602001905181019061023e91906106d7565b90505050949350505050565b600060645b9392505050565b600080610263878761029b565b9050336001600160a01b0382161461028d5760405162461bcd60e51b815260040161021b90610605565b60005b979650505050505050565b604080516001600160a01b03841660208083019190915261ffff8416828401528251808303840181526060909201909252805191012060009061024f907f00000000000000000000000000000000000000000000000000000000000000009084906040516334b1f0a960e21b815261ffff831660048201526000906103cc906001600160a01b0386169063d2c7c2a490602401602060405180830381865afa15801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190610798565b604051603881018790526f5af43d82803e903d91602b57fd5bf3ff60248201526014810191909152733d602d80600a3d3981f3363d3d373d3d3d363d738152605881018490526037600c8201206078820152605560439091012090565b949350505050565b6000602082840312156103e657600080fd5b81356001600160e01b03198116811461024f57600080fd5b6001600160a01b038116811461041357600080fd5b50565b60006020828403121561042857600080fd5b813561024f816103fe565b803561ffff8116811461044557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156104835761048361044a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156104b2576104b261044a565b604052919050565b600080600080608085870312156104d057600080fd5b84356104db816103fe565b935060206104ea868201610433565b935060408601359250606086013567ffffffffffffffff8082111561050e57600080fd5b818801915088601f83011261052257600080fd5b8135818111156105345761053461044a565b610546601f8201601f19168501610489565b9150808252898482850101111561055c57600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000806040838503121561058f57600080fd5b823561059a816103fe565b946020939093013593505050565b600080600080600060a086880312156105c057600080fd5b85356105cb816103fe565b94506105d960208701610433565b9350604086013592506060860135915060808601356105f7816103fe565b809150509295509295909350565b6020808252600990820152682327a92124a22222a760b91b604082015260600190565b80516bffffffffffffffffffffffff8116811461044557600080fd5b80516001600160801b038116811461044557600080fd5b600082601f83011261066c57600080fd5b8151602067ffffffffffffffff8211156106885761068861044a565b8160051b610697828201610489565b92835284810182019282810190878511156106b157600080fd5b83870192505b84831015610290576106c883610644565b825291830191908301906106b7565b6000602082840312156106e957600080fd5b815167ffffffffffffffff8082111561070157600080fd5b9083019060e0828603121561071557600080fd5b61071d610460565b8251815261072d60208401610628565b602082015261073e60408401610644565b604082015261074f60608401610644565b60608201526080830151608082015260a08301518281111561077057600080fd5b61077c8782860161065b565b60a08301525060c083015160c082015280935050505092915050565b6000602082840312156107aa57600080fd5b815161024f816103fe56fea2646970667358221220d56ee6e2e270f662117ec2be9dd6b78eeff0ba26a8825c6c0ffcc7374e07c8db64736f6c63430008130033";

type TestCollateralManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCollateralManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCollateralManager__factory extends ContractFactory {
  constructor(...args: TestCollateralManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factory: PromiseOrValue<string>,
    _refId: PromiseOrValue<BigNumberish>,
    validate_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestCollateralManager> {
    return super.deploy(
      _factory,
      _refId,
      validate_,
      overrides || {}
    ) as Promise<TestCollateralManager>;
  }
  override getDeployTransaction(
    _factory: PromiseOrValue<string>,
    _refId: PromiseOrValue<BigNumberish>,
    validate_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factory,
      _refId,
      validate_,
      overrides || {}
    );
  }
  override attach(address: string): TestCollateralManager {
    return super.attach(address) as TestCollateralManager;
  }
  override connect(signer: Signer): TestCollateralManager__factory {
    return super.connect(signer) as TestCollateralManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCollateralManagerInterface {
    return new utils.Interface(_abi) as TestCollateralManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCollateralManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestCollateralManager;
  }
}
